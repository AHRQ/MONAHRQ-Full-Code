<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by TextTemplatingFileGenerator.
//     
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.ComponentModel.Composition;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Monahrq.Infrastructure.Data;
using Monahrq.Infrastructure.Entities.Domain;
using Monahrq.Infrastructure.Integration.Castle.Aspects;

using PropertyChanged;

<#
var domain = "Datasets";
var entities = new []
{
	new {Key = "DatasetImport", Base = "WingItem", KeyType="int"}
	};
#>
namespace Monahrq.Infrastructure.Entities.Domain.<#=domain #>
{	

	using Wings;

	public partial interface I<#=domain #>Service
    {
    }

	[AspectsStatusExport(typeof(I<#=domain#>Service), AreAspectsEnabled = true)]
	[UnitOfWorkAspect]
	public partial class <#=domain#>Service: I<#=domain#>Service
    {


<# 
foreach(var entity in entities)
{#>
		[Import]
		protected I<#=entity.Key#>Repository <#=entity.Key#>Repository { get;set;}
<#}#>  
    
	}


	public partial interface I<#=domain #>SessionFactoryProvider
		: IDomainSessionFactoryProvider
	{
	}

	[Export(typeof(I<#=domain #>SessionFactoryProvider))]
	[PartCreationPolicy(CreationPolicy.Shared)]
	public partial class <#=domain #>SessionFactoryProvider
		: DomainSessionFactoryProvider<<#=domain#>Service>
	{
	}
<# 
foreach(var entity in entities)
{#> 
	[ImplementPropertyChanged]
    public partial class <#=entity.Key #>: <#=entity.Base #><<#=entity.KeyType #>>
    {
    }

	public partial interface I<#=entity.Key #>Repository : IRepository<<#=entity.Key #>,<#=entity.KeyType #>>
	{
	}

	[Export(typeof(I<#=entity.Key #>Repository))]
	public partial class <#=entity.Key #>Repository : RepositoryBase<<#=entity.Key #>,<#=entity.KeyType #>>,
				 I<#=entity.Key #>Repository 
	{
			
		IDomainSessionFactoryProvider _provider;
	
		[Import(typeof(I<#=domain #>SessionFactoryProvider))]
		protected override IDomainSessionFactoryProvider DomainSessionFactoryProvider
		{
			get 
			{
				return _provider;
			} 
			set 
			{
				_provider = value;
			} 
		}
	}
<#}#>

	namespace Maps
	{
		using Monahrq.Infrastructure.Entities.Domain.Wings.Maps;

<# 
foreach(var entity in entities)
{#> 
		public partial class <#=entity.Key #>Map : <#=entity.Base #>Map<<#=entity.Key #>, <#=entity.KeyType #>>
		{
		}
<# }#>

	}
}

 