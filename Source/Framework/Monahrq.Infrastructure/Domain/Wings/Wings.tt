<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by TextTemplatingFileGenerator.
//     
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.ComponentModel.Composition;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using Monahrq.Infrastructure.Data;
using Monahrq.Infrastructure.Entities.Data.Strategies;
using Monahrq.Infrastructure.Entities.Domain;
using Monahrq.Infrastructure.Integration.Castle.Aspects;

using PropertyChanged;

<#
var domain = "Wings";
var entities = new []
{
	new {Key = "Wing", Base = "WingItem", KeyType="int", Discriminate=false, KeyStrategy="IdentityGeneratedKeyStrategy"},
	new {Key = "Target", Base = "Feature", KeyType="int", Discriminate=true, KeyStrategy="IdentityGeneratedKeyStrategy"},
	new {Key = "Generator", Base = "Feature", KeyType="int", Discriminate=true, KeyStrategy="IdentityGeneratedKeyStrategy"},
	new {Key = "Scope", Base = "TargetOwnedWingItem", KeyType="int", Discriminate=false, KeyStrategy="IdentityGeneratedKeyStrategy"},
	new {Key = "Element", Base = "TargetOwnedWingItem", KeyType="int", Discriminate=false, KeyStrategy="IdentityGeneratedKeyStrategy"},
	new {Key = "ScopeValue", Base = "ScopedOwnedWingItem", KeyType="int", Discriminate=false, KeyStrategy="IdentityGeneratedKeyStrategy"},
	};
#>
namespace Monahrq.Infrastructure.Entities.Domain.<#=domain #>
{	

	public interface IWingItem: INamedEntity 
    {
		string Description { get; set; }
    }

	public partial class WingItem<T>: Entity<T>, IWingItem
    {
		protected WingItem() : base() { }
        public WingItem(string name) : base() { Name = name; }
		public virtual string Description { get; set; }
    }

	 public partial class OwnedWingItem<TOwner, TOwnerKey, T> : OwnedEntity<TOwner, TOwnerKey, T>, IWingItem
        where TOwner : Entity<TOwnerKey>, IWingItem
	{
		protected OwnedWingItem() : base() { }
        public OwnedWingItem(TOwner owner, string name) : base(owner) { Name = name; }
		public virtual string Description { get; set; }
    }

	public partial class TargetOwnedWingItem<T>: OwnedWingItem<Target, int, T>
    {
		protected TargetOwnedWingItem() : base() { }
        public TargetOwnedWingItem(Target owner, string name) : base(owner, name) { }
    }

	public partial class WingOwnedWingItem<T>: OwnedWingItem<Wing, int, T>
    {
		protected WingOwnedWingItem() : base() { }
        public WingOwnedWingItem(Wing owner, string name) : base(owner, name) { }
    }

	public partial class Feature : WingOwnedWingItem<int>
    {
		protected Feature() : base() { }
        public Feature(Wing owner, string name) : base(owner, name) { }
		public virtual Guid Guid { get; set; }
		public virtual string ClrType { get; set; }
    }

	public partial class ElementOwnedWingItem<T>: OwnedWingItem<Element, int, T>
    {
		protected ElementOwnedWingItem() : base() { }
        public ElementOwnedWingItem(Element owner, string name) : base(owner, name) { }
    }

	public partial class ScopedOwnedWingItem<T>: OwnedWingItem<Scope, int, T>
    {
		protected ScopedOwnedWingItem() : base() { }
        public ScopedOwnedWingItem(Scope owner, string name) : base(owner, name) { }
    }
 
<# 
foreach(var entity in entities)
{#> 
	
	[ImplementPropertyChanged]
	<# if (!entity.Discriminate)
	{#>
    public partial class <#=entity.Key #>: <#=entity.Base #><<#=entity.KeyType #>>
    { 
    }
	<#} 
	else 
	{#>
	public partial class <#=entity.Key #>: <#=entity.Base #> 
    {
    }
	<#}#>

	public interface I<#=entity.Key #>Repository : IRepository<<#=entity.Key #>,<#=entity.KeyType #>>
	{
	}

	namespace Repository
	{
		[Export(typeof(I<#=entity.Key #>Repository))]
		public partial class <#=entity.Key #>Repository : RepositoryBase<<#=entity.Key #>,<#=entity.KeyType #>>,
				 I<#=entity.Key #>Repository 
		{
			
			IDomainSessionFactoryProvider _provider;
	
			[Import(typeof(ISessionFactoryProvider))]
			protected override IDomainSessionFactoryProvider DomainSessionFactoryProvider
			{
				get 
				{
					return _provider;
				} 
				set 
				{
					_provider = value;
				} 
			}
		}

	} <#}#>

	namespace Maps
	{
		using Monahrq.Infrastructure.Entities.Domain.Maps;
		using FluentNHibernate.Mapping;


		public abstract partial class WingItemMap<TType, TKey, TKeyStrategy> : EntityMap<TType,TKey, TKeyStrategy>
			where TKeyStrategy : IKeyStrategy, new()
			where TType : Entity<TKey>, IWingItem
		{
			public WingItemMap(): base()
			{
               Map(x => x.Description);
			}
		}

		public abstract partial class OwnedWingItemMap<TOwner, TOwnerKey, TItemType, TKey, TKeyStrategy>
			: WingItemMap<TItemType, TKey, TKeyStrategy>
			where TKeyStrategy : IKeyStrategy, new()
			where TItemType: OwnedWingItem<TOwner, TOwnerKey, TKey>
			where TOwner: Entity<TOwnerKey>, IWingItem
        {
           public OwnedWingItemMap() : base()
            {

            }
        }

		public abstract partial class WingOwnedWingItemMap<TItemType, TKey, TKeyStrategy> : OwnedWingItemMap<Wing, int, TItemType, TKey, TKeyStrategy>
			where TKeyStrategy : IKeyStrategy, new()
            where TItemType : WingOwnedWingItem<TKey>  
		{
			public WingOwnedWingItemMap() : base()
			{
			}
		}

        public abstract partial class ElementOwnedWingItemMap<TItemType, TKey, TKeyStrategy>
                        : OwnedWingItemMap<Element, int, TItemType, TKey, TKeyStrategy>
				where TKeyStrategy : IKeyStrategy, new()
				where TItemType : OwnedWingItem<Element, int, TKey> 
		{
			public ElementOwnedWingItemMap() : base()
			{
			}
		}

        public abstract partial class TargetOwnedWingItemMap<TItemType, TKey, TKeyStrategy>
				: OwnedWingItemMap<Target, int, TItemType, TKey, TKeyStrategy>
				where TKeyStrategy : IKeyStrategy, new()
				where TItemType : OwnedWingItem<Target, int, TKey>
		{
			public TargetOwnedWingItemMap() : base()
			{
			}
		}

        public abstract partial class ScopedOwnedWingItemMap<TItemType, TKey, TKeyStrategy>
				: OwnedWingItemMap<Scope, int, TItemType, TKey, TKeyStrategy>
				where TKeyStrategy : IKeyStrategy, new()
				where TItemType : OwnedWingItem<Scope, int, TKey>
		{
			public ScopedOwnedWingItemMap() : base()
			{
			}
		}

		public partial class FeatureMap : WingOwnedWingItemMap<Feature, int, IdentityGeneratedKeyStrategy>
		{
			public FeatureMap(): base()
			{
				Map(x => x.ClrType)
					.Not.Nullable();
	            Map(x => x.Guid).Not.Nullable();
			}

		}

 
		public abstract class FeatureSubclassMap<TFeature>: 
			OwnedEntitySubclassMap<TFeature, int, Wing, int>
			 where TFeature : Feature
   		{
			protected override string OwnerName
			{
				get
				{
					return "Wing_Id";
				}
			}
		} 		
			 

<# 
foreach(var entity in entities)
{
	if(!entity.Discriminate)
	{#>  
		// this is the comment for not discrim
		public partial class <#=entity.Key #>Map : <#=entity.Base #>Map<<#=entity.Key #>, <#=entity.KeyType #>, <#=entity.KeyStrategy#>> 
<#
	}
	else
	{#>		
		// this is the comment for discrim
		public partial class <#= entity.Key #>Map : FeatureSubclassMap<<#= entity.Key #>> 
<#
	}#>
   		{
		
		} <# 
}#>

	}
}

 