<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data" #>
<#@ assembly name="C:\CODE\Trunk\TextTemplateHelpers\bin\Debug\TextTemplateHelpers.dll" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="TextTemplateHelpers" #>
<#@ output extension=".cs" #>
<#
var builder = new SqlConnectionStringBuilder();
builder.InitialCatalog = "MONAHRQ";
builder.DataSource = @".\SQLExpress";
builder.IntegratedSecurity = true;
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by TextTemplatingFileGenerator.
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// There are 3 aspects to "required fields"...
// 1. Required Validation Attribute... for validation reporting.
// 2. Required arg in the WingElementAttribute for enforcing the user to map the target field element 
// 3. nullability to control value assignment

/*

namespace Monahrq.Wing.InpatientData.EmergencyDischarge
{
	using System;
	using System.ComponentModel.DataAnnotations;

    using Monahrq.Sdk.Attributes.Wings;
    using Monahrq.Sdk.Modules.Wings;

	public static class Constants
	{
		public const string WingGuid = "{A66624FC-4FD1-49A0-90E3-991CB7F5EAD6}";
	}

	 [WingModule(typeof(EmergencyDischargeWingModule), 
        Constants.WingGuid, 
        "Emergency Discharge Data", 
        "Provides Services for Emergency Discharge Statistics")]
    public partial class EmergencyDischargeWingModule 
    {
<#
 
using(var conn = new SqlConnection(builder.ConnectionString))
{
	conn.Open();
	using(var cmd =  conn.CreateCommand())
	{
		cmd.CommandText = "select REPLACE(REPLACE(am.[target_column],'/',''),' ','') target_column, am.column_heading "
		+" from [EmergencyDischarge].automatch_columns am inner join [EmergencyDischarge].dataset_columns dc"
		+" on am.target_column = dc.target_column";
		var rdr = cmd.ExecuteReader();
		var columns = new Dictionary<string, List<string>>();
		while(rdr.Read())
		{
			if(!columns.ContainsKey(rdr.GetString(0)))
			{
				columns.Add(rdr.GetString(0), new List<string>());
			}
			columns[rdr.GetString(0)].Add(rdr.GetString(1));
		}
		
		#>
		protected override void OnApplyDatasetHints()
        {
<#
foreach(var key in columns.Keys)
{
	var outstrings = string.Join(",", columns[key].Select(s=>string.Format(@"""{0}""", s)));

#>		
			Target<EmergencyDischargeTarget>(target => target.<#= key #>)
			.ApplyMappingHints(<#=outstrings#>);		
<#
}
#>
        }
<#

	}
}
#>
    }


	[WingTarget("Emergency Discharge Data", "Mapping target for importing Emergency Discharge Data")]
	public partial class EmergencyDischargeTarget
	{
<#
 
using(var conn = new SqlConnection(builder.ConnectionString))
{
	conn.Open();
	using(var cmd = new SqlCommand("SELECT "
		+" case REPLACE([target_type],'/','') "
		+" when 'STRING' then 'string' "
		+" when 'integer' then 'int' "
		+" when 'Date' then 'DateTime' "
		+" when 'enum' then REPLACE([target_column],'/','') "
		+" else 'object' end"
		 +" , REPLACE([target_column],'/',''),"
	+ " case is_required when 'y' then 'true' else 'false' end, "
	+ " target_column, sort_order, Description FROM [EmergencyDischarge].[dataset_columns]"
	+ " order by sort_order", conn))
	{
		var rdr = cmd.ExecuteReader();
		while(rdr.Read())
		{
			// datatype variable-name semi-colon
			#>
			<#=rdr.GetString(0).Replace(" ", string.Empty)#><#= rdr.GetString(2) == "true" ? string.Empty: rdr.GetString(0) != "string"? "?" : string.Empty #> _<#=rdr.GetString(1).Replace(" ", string.Empty)#>;
			<#
			foreach(var attr in ValidatorAttributeHelpers.ValidatorAttributes(conn, "[EmergencyDischarge].[dataset_columns]", rdr.GetString(3)))
{#>
<#=	attr #>
<#}#>
		[WingTargetElement("<#=rdr.GetString(1).Replace(" ", string.Empty)#>","<#=rdr.GetString(1)#>", typeof(<#=rdr.GetString(0).Replace(" ", string.Empty)#>), <#=rdr.GetString(2)#>, <#=rdr.GetValue(4)#>, "<#=rdr.GetValue(5)#>")]
		public virtual <#=rdr.GetString(0).Replace(" ", string.Empty)#><#= rdr.GetString(2) == "true" ? string.Empty: rdr.GetString(0) != "string"? "?" : string.Empty #> <#=rdr.GetString(1).Replace(" ", string.Empty)#>
		{
            get 
			{ 
				return _<#=rdr.GetString(1).Replace(" ", string.Empty)#>; 
			} 
            set 
			{ 
				_<#=rdr.GetString(1).Replace(" ", string.Empty)#> = value; 
            }
		}

<#
		}
	}
}
#>
	}
}

*/